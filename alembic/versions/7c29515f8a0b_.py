# SPDX-FileCopyrightText: 2024 Osnabrück University of Applied Sciences
# SPDX-FileContributor: Andreas Schliebitz
# SPDX-FileContributor: Henri Graf
# SPDX-FileContributor: Jonas Tüpker
# SPDX-FileContributor: Lukas Hesse
# SPDX-FileContributor: Maik Fruhner
# SPDX-FileContributor: Prof. Dr.-Ing. Heiko Tapken
# SPDX-FileContributor: Tobias Wamhof
#
# SPDX-License-Identifier: MIT

"""empty message

Revision ID: 7c29515f8a0b
Revises: 
Create Date: 2022-05-05 14:40:08.709310

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "7c29515f8a0b"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "datasets",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("owner", sa.String(), nullable=True),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("last_modified", sa.DateTime(), nullable=True),
        sa.Column("annotation_task_id", sa.Integer(), nullable=True),
        sa.Column("filecount", sa.Integer(), nullable=True),
        sa.Column("total_filesize", sa.BigInteger(), nullable=True),
        sa.Column("metadata_uri", sa.String(), nullable=True),
        sa.Column("bucket_name", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_datasets_id"), "datasets", ["id"], unique=False)
    op.create_table(
        "edge_devices",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("portainer_id", sa.Integer(), nullable=True),
        sa.Column("os", sa.String(), nullable=True),
        sa.Column("cpu_count", sa.Integer(), nullable=True),
        sa.Column("arch", sa.String(), nullable=True),
        sa.Column("memory", sa.Integer(), nullable=True),
        sa.Column("last_heartbeat", sa.DateTime(), nullable=True),
        sa.Column("edge_key", sa.String(), nullable=True),
        sa.Column("registered", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_edge_devices_id"), "edge_devices", ["id"], unique=False)
    op.create_table(
        "models",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("owner", sa.String(), nullable=True),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("last_modified", sa.DateTime(), nullable=True),
        sa.Column("file_size", sa.BigInteger(), nullable=True),
        sa.Column("bucket_name", sa.String(), nullable=True),
        sa.Column("file_name", sa.String(), nullable=True),
        sa.Column(
            "format",
            sa.Enum("onnx", "pytorch", "tensorflow", "tensorrt", name="modelformat"),
            nullable=True,
        ),
        sa.Column("input_name", sa.String(), nullable=True),
        sa.Column(
            "input_datatype",
            sa.Enum(
                "float16",
                "float32",
                "float64",
                "int8",
                "int16",
                "int32",
                "int64",
                "uint8",
                "uint16",
                "uint32",
                "uint64",
                "bool",
                "string",
                name="tensordatatype",
            ),
            nullable=True,
        ),
        sa.Column("input_shape", sa.ARRAY(sa.Integer()), nullable=True),
        sa.Column(
            "input_semantics",
            sa.Enum("HWC", "NHWC", "CHW", "NCHW", name="inputtensorshapesemantics"),
            nullable=True,
        ),
        sa.Column("output_name", sa.String(), nullable=True),
        sa.Column(
            "output_datatype",
            sa.Enum(
                "float16",
                "float32",
                "float64",
                "int8",
                "int16",
                "int32",
                "int64",
                "uint8",
                "uint16",
                "uint32",
                "uint64",
                "bool",
                "string",
                name="tensordatatype",
            ),
            nullable=True,
        ),
        sa.Column("output_shape", sa.ARRAY(sa.Integer()), nullable=True),
        sa.Column("output_labels", sa.ARRAY(sa.String()), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_models_id"), "models", ["id"], unique=False)
    op.create_table(
        "containers",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("owner", sa.String(), nullable=True),
        sa.Column("repository", sa.String(), nullable=True),
        sa.Column("tag", sa.String(), nullable=True),
        sa.Column("platform", sa.String(), nullable=True),
        sa.Column("exposed_ports", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("last_modified", sa.DateTime(), nullable=True),
        sa.Column("model_id", sa.Integer(), nullable=True),
        sa.Column("metadata_uri", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["model_id"],
            ["models.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_containers_id"), "containers", ["id"], unique=False)
    op.create_table(
        "model_deployments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "type", sa.Enum("edge", "cloud", name="deploymenttype"), nullable=True
        ),
        sa.Column("model_id", sa.Integer(), nullable=True),
        sa.Column("edge_device_id", sa.Integer(), nullable=True),
        sa.Column("creation_date", sa.DateTime(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "created", "running", "exited", "failed", name="modeldeploymentstatus"
            ),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["edge_device_id"],
            ["edge_devices.id"],
        ),
        sa.ForeignKeyConstraint(
            ["model_id"],
            ["models.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("model_id", "edge_device_id", name="_model_edge_device_uc"),
    )
    op.create_index(
        op.f("ix_model_deployments_id"), "model_deployments", ["id"], unique=False
    )
    op.create_table(
        "container_deployments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("container_id", sa.Integer(), nullable=True),
        sa.Column("edge_device_id", sa.Integer(), nullable=True),
        sa.Column("creation_date", sa.DateTime(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "created",
                "deployed",
                "undeployed",
                "failed",
                name="containerdeploymentstatus",
            ),
            nullable=True,
        ),
        sa.Column("docker_container_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["container_id"],
            ["containers.id"],
        ),
        sa.ForeignKeyConstraint(
            ["edge_device_id"],
            ["edge_devices.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_container_deployments_id"),
        "container_deployments",
        ["id"],
        unique=False,
    )
    op.create_table(
        "port_mappings",
        sa.Column("from", sa.Integer(), nullable=False),
        sa.Column("to", sa.Integer(), nullable=False),
        sa.Column(
            "protocol",
            sa.Enum("udp", "tcp", name="portmappingprotocol"),
            nullable=False,
        ),
        sa.Column("container_deployment_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["container_deployment_id"],
            ["container_deployments.id"],
        ),
        sa.PrimaryKeyConstraint("from", "to", "protocol", "container_deployment_id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("port_mappings")
    op.drop_index(
        op.f("ix_container_deployments_id"), table_name="container_deployments"
    )
    op.drop_table("container_deployments")
    op.drop_index(op.f("ix_model_deployments_id"), table_name="model_deployments")
    op.drop_table("model_deployments")
    op.drop_index(op.f("ix_containers_id"), table_name="containers")
    op.drop_table("containers")
    op.drop_index(op.f("ix_models_id"), table_name="models")
    op.drop_table("models")
    op.drop_index(op.f("ix_edge_devices_id"), table_name="edge_devices")
    op.drop_table("edge_devices")
    op.drop_index(op.f("ix_datasets_id"), table_name="datasets")
    op.drop_table("datasets")
    # ### end Alembic commands ###
