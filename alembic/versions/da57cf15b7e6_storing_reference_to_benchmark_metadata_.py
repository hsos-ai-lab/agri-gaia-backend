"""Storing reference to benchmark metadata only.

Revision ID: da57cf15b7e6
Revises: 5e52ee96368c
Create Date: 2025-04-04 11:45:38.717596

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'da57cf15b7e6'
down_revision = '5e52ee96368c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('benchmark_jobs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner', sa.String(), nullable=True),
    sa.Column('bucket_name', sa.String(), nullable=True),
    sa.Column('minio_location', sa.String(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('last_modified', sa.DateTime(), nullable=True),
    sa.Column('dataset_id', sa.Integer(), nullable=True),
    sa.Column('model_id', sa.Integer(), nullable=True),
    sa.Column('cpu_only', sa.Boolean(), nullable=True),
    sa.Column('edge_device', sa.String(), nullable=True),
    sa.Column('inference_client', sa.Enum('TritonDenseNetClient', 'TritonYoloClient', name='inferenceclient'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_benchmark_jobs_id'), 'benchmark_jobs', ['id'], unique=False)
    op.drop_table('triton_densenet_clients')
    op.drop_table('triton_yolo_clients')
    op.drop_table('triton_inference_clients')
    op.drop_table('benchmark_configs')
    op.drop_table('benchmark_edge_devices')
    op.drop_table('inference_clients')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('triton_yolo_clients',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('num_classes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('scaling', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('confidence_thres', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('iou_thres', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('input_width', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('input_height', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['triton_inference_clients.id'], name='triton_yolo_clients_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='triton_yolo_clients_pkey')
    )
    op.create_table('inference_clients',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('inference_clients_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('protocol', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('host', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('num_workers', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('samples_per_second', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='inference_clients_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('triton_densenet_clients',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('num_classes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('scaling', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id'], ['triton_inference_clients.id'], name='triton_densenet_clients_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='triton_densenet_clients_pkey')
    )
    op.create_table('triton_inference_clients',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('model_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('batch_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('warm_up', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['id'], ['inference_clients.id'], name='triton_inference_clients_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='triton_inference_clients_pkey')
    )
    op.create_table('benchmark_edge_devices',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('benchmark_edge_devices_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('protocol', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('host', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('port', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='benchmark_edge_devices_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('benchmark_configs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('edge_device_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('inference_client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('cpu_only', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['edge_device_id'], ['benchmark_edge_devices.id'], name='benchmark_configs_edge_device_id_fkey'),
    sa.ForeignKeyConstraint(['inference_client_id'], ['inference_clients.id'], name='benchmark_configs_inference_client_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='benchmark_configs_pkey')
    )
    op.drop_index(op.f('ix_benchmark_jobs_id'), table_name='benchmark_jobs')
    op.drop_table('benchmark_jobs')
    # ### end Alembic commands ###
